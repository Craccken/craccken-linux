#  ████████╗███╗   ███╗██╗   ██╗██╗  ██╗
#  ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝
#     ██║   ██╔████╔██║██║   ██║ ╚███╔╝ 
#     ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗ 
#     ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗
#     ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝
set -g default-terminal "xterm-256color"            # Set the default terminal for new window created in this session - the default value of the TERM environment variable.
set -g escape-time 0                                # Set the time in milliseconds for which tmux waits after an escape is input to determine if it is part of a function or meta key sequences.
set -g editor "/usr/bin/nvim"                       # Set the command used when tmux runs an editor.
set -g exit-empty on                                # If enabled (the default), the server will exit when there are no active sessions
set -g exit-unattached off                          # If enabled, the server will exit when there are no attached clients.
set -g extended-keys on                             # When on or always, the escape sequence to enable extended keys is sent to the terminal, if tmux knows that it is supported.  tmux always recognises extended keys itself.  If this option is on, tmux will only forward ex‐ tended keys to applications when they request them; if always, tmux will always forward the keys.
# set -g focus-events on                              # When enabled, focus events are requested from the terminal if supported and passed through to applications running in tmux.
# set -g history-file filepath                        # If not empty, a file to which tmux will write command prompt history on exit and load it from on start.
# set -g message-limit 200                            # Set the number of error or information messages to save in the message log for each client.
set -g history-limit 5000                           # By default, tmux keeps the previous 2000 lines of window history (you can scroll up 2000 lines above your current terminal line).
set -g mouse on                                     # Supports xterm(1) mouse sequences.
set -g default-shell /usr/bin/zsh                   # Specify the default shell.
set -g base-index 1                                 # Set the base index from which an unused index should be searched when a new window is created.
set -g pane-base-index 1                           # Set the base index of panes from which an unused index should be search when a new pane is created.
set -ga terminal-overrides ",xterm-256color*:Tc"    # This fix weird color in tmux dont REMOVE this
set -g renumber-windows on                          # If on, when a window is closed in a session, automatically renumber the other windows in numerical order.
set -g repeat-time 599                              # Allow multiple commands to be entered without pressing the prefix-key again in the specified time mulliseconds (the default is 500).
set -g set-titles on                                # Attempt to set the client terminal title usign the `tsl` and `fsl` terminfo(5) entries if they exist.
set -g set-titles-string "#W"                       # String used to set the client terminal title if set-titles is on.
set -g status-interval 30                           # Update the status line every interval seconds.
set -g status-justify left                          # Set the position of the window list in the status line: left, centre or right.
set -g status-position bottom                       # Set the position of the status line.
set -g status-left-length 30                        # Set the maximum length of the left component of status line, the default is 10.
set -g status-right-length 45                       # Set the maximum lenght of the right component of the status line, the default is 40.
set -g status-style fg=white,bg=#010204             # Set status line style.
set -g display-panes-active-colour '#030d11'        # Set the colour used by the display-panes command to show the indicator for the active panes
set -g display-panes-colour '#36a3d9'               # Set the colour used by the display-panes command show the indicators for inactive panes.
set -g message-style fg=white,bg=#010204            # Set status line message style.
set -g message-command-style fg=black,bg=red        # Set status line message command style.
set -g status-left "#[fg=#242c3d,bg=#08090d] #S "   # Display string (by default the session name) to the left of the status line.
set -g status-right ""                              # Display string to the right to the status line.

set -g automatic-rename off                 # Control automatic window renaming.
set -g clock-mode-style 24                  # Set clock hour format.
set -g clock-mode-colour '#36a3d9'          # Set clock colour.
set -g mode-style fg=#36a3d9,bg=#030d11     # Set window modes style.
set -g pane-border-style fg=#030d11         # Set the pane border style for panes aside from the active pane.
set -g pane-active-border-style fg=#36a3d9  # Set the pane border style for the currently active pane.
set -g window-status-separator ""           # Sets the separator drawn between windows in the status line, the default is a single space character.
set -g allow-rename on                      # Allow programs in the pane to change the window name using a terminal escape sequence.
set -g window-style bg=#010204              # Set the pane style.
set -g window-active-style bg=#010204       # Set the pane style when it is active pane.
set -g window-status-format " #[fg=#36a3d9,bg=#030d11] #I #W#{?window_flags,#{window_flags}, } " # Set the format in which the window is displayed in the status line window list.
set -g window-status-current-format " #[fg=#030d11,bg=#36a3d9] #I #W#{?window_flags,#{window_flags}, } " # Set status line style for the currently active window.
set -g popup-style bg=#010204 # Set the popup style
set -g popup-border-lines none # Set the type of characters used for drawing popup borders

unbind C-Space                  # Remove bind-key of Control+Space
set -g prefix C-Space           # Set a secondary key accepted as a prefix key: Control + space
bind-key C-Space send-prefix    # send prefix keystroke to a window, useful with nested tmux sessions

bind k select-pane -U       # select-pane up:               prefix-key + k
bind j select-pane -D       # select-pane down:             prefix-key + j
bind h select-pane -L       # select-pane left:             prefix-key + h
bind l select-pane -R       # select-pane right:            prefix-key + l
bind -r K resize-pane -U 5  # resize-pane to up 5%:         prefix-key + K
bind -r J resize-pane -D 5  # resize-pane to down 5%:       prefix-key + J 
bind -r H resize-pane -L 5  # resize-pane to left 5%:       prefix-key + H
bind -r L resize-pane -R 5  # resize-pane to right 5%:      prefix-key + L

bind -r "<" swap-window -d -t -1 # Move the current window to the left: prefix-key + <
bind -r ">" swap-window -d -t +1 # Move the current window to the right: prefix-key + >

bind "\\" split-window -h -c "#{pane_current_path}" # split-window horizontally: prefix-key + \\
bind "|" split-window -fh -c "#{pane_current_path}" # split-window horizontally with a new pane spanning the full window height: prefix-key + |
bind "-" split-window -v -c "#{pane_current_path}"  # split-window vertically: prefix-key + -
bind "_" split-window -fv -c "#{pane_current_path}" # split-window vertically with a new pane spanning the full window height: prefix-key + _

bind g choose-window 'join-pane -h -s "%%"' # Choose window and join them horizontally: prefix-key + g
bind G choose-window 'join-pane -s "%%"'    # Choose window and join them vertically: prefix-key + G

bind N previous-window # Move to the previous window in the session: prefix-key + N
bind m next-layout # Move to the next layout and rearrange the panes to fit: prefix-key + m
bind Space last-window # Toggle between the current and previous window: prefix-key + Tab
bind c new-window -c "#{pane_current_path}" # Create a new window with current directory same as current pane: prefix-key + c
bind p split-window -h "/usr/bin/nvim ~/quicknotes.md" # Open quick notes on new window: prefix-key + h
bind r source-file /etc/tmux.conf \; display-message "Reloaded!" # reload tmux config file: prefix-key + r

# List of plugins ~~ https://github.com/tmux-plugins/tpm
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

set -g @plugin 'tmux-plugins/tpm' # Tmux Plugin Manager 
set -g @plugin 'tmux-plugins/tmux-continuum' # Continuous saving of tmux environment. Automatic restore when tmux is started. Automatic tmux start when computer is turned on. 
set -g @plugin 'tmux-plugins/tmux-resurrect' # Persists tmux environment across system restarts.

set -g @continuum-restore 'on' # Automatic restore environment when tmux started
set -g @continuum-save-interval '5' # Automatic save environment every 5 minutes in background
set -g @resurrect-save 'C-s'    # Tmux resurrect save environment: prefix-key + Ctrl-s
set -g @resurrect-restore 'C-r' # Tmus resurrect restore environment: prefix-key + Ctrl-r
set -g @resurrect-strategy-nvim 'session' # Tmux resurrect restore neovim sessions

# prefix + I -- Installs new plugins from GitHub or any other git repository. Refreshes TMUX environment
# prefix + U -- updates plugin(s)
# prefix + alt + u -- remove/uninstall plugins not on the plugin list

run '~/.local/share/tmux/plugins/tpm/tpm' # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
