#!/usr/bin/env zsh
# vim:ft=sh
emulate -L zsh; setopt extendedglob warncreateglobal pipefail nounset errreturn
need_installed pacman paru # Check if command is installed || exit

set_it_up(){ # Create function
    if [[ $REVERSE_MODE == true ]]; then # If variable REVERSE_MODE is true
        paru -Rns "$@" # Remove package of argument this function
    else
        paru -Sy --needed "$@" # Install package of argument this function
    fi # End if-else statement
}
local -a available_options=( # Declare local array
    'gaming' 
    'music' 
    'other'
)
[[ "$1" == "reverse" ]] && { local REVERSE_MODE=true; shift 1; } # If argument-1 is 'reverse' then: Create variable with value true; Remove argument-1
local option="${1:-$(print -l ${available_options} | fzf --no-multi --header='Choose your setup')}" # Declare local variable if argument-1 empty then pick option with fzf
case ${option} in # Read option variable
    "haxor"|"leet") # If option is haxor then:
        play_audio_random /opt/craccken/sound/glitch # Play audio random in directory
        local -a haxor_options=( # Create local array with list of package related hacking
            nmap 
            sqlmap 
            wifite
            evilginx
            seclists
            rustscan
            aircrack-ng 
            wpscan 
            thc-ipv6
            netmask 
            wireshark-qt 
            weevely 
            exploitdb
            metasploit
            metasploit-payload-creator 
            beef-git
            snort
            armitage 
            autopsy-bin
            social-engineer-toolkit 
            greenbone-security-assistant
            shellter 
            sbd 
            john 
            johnny-git 
            hashcat 
            macchanger
            hashcat-utils
            truecrack-git 
            ophcrack 
            cmospwd
            chntpw
            rainbowcrack 
            bluelog
            netsniff-ng
            extundelete
            magicrescue
            recoverjpeg
            rifiuti2
            safecopy
            scalpel-git
            dcfldd
            wpscrack 
            mdcrack
            suscrack
            android-apktool
            patator 
            sslsplit
            hexinject
            weplab
            fern-wifi-cracker
            handshake-cracker
            vncrack
            rarcrack
            dnsmap
            dnswalk
            fierce
            dnsenum
            xprobe
            arpfox
            pbzx
            cutter
            crunch
            wordlists
            cowpatty
            tcppc
            spqr
            bully
            redfang
            vinetto
            regripper-git
            reglookup
            dex2jar
            smali
            radare2
            rizin
            peepdf
            pev
            yersinia
            evilgrade
            sslsniff
            sslyze
            driftnet-git
            darkstat
            mfcuk-git
            steghide
            stegano
            sublist3r-git
            spooftooph
            gitleaks
            binwalk
            bettercap
            ettercap
            ettercap-gtk
            airgeddon-git
            subfinder
            mfoc
            maltego
            urlcrazy
            masscan
            hping
            fping
            payload-dumper-go
            ysoserial-git
            payloadsallthethings-git
            etherape
            kismet
            kismet-plugin-ubertooth
            qrap
            hydra
            mfterm
            medusa
            nishang
            rockyou
            joomscan-git
            skipfish
            whatweb
            nikto
            wapiti
            websploit
            cadaver
            dirstalk
            gobuster
            burpsuite
            slowhttptest
            lynis
            rtl8188eus_monitor_mode_support
            unix-privesc-check
            cutycapt-qt5-git
            burpsuite-pro
            dirb
            voiphopper
            proxychains-ng
            duplicut
            ipv6toolkit
            reaver
            fluxion-git
            outguess
            sipp
            sleuthkit
            wafw00f
            httprobe-bin
            linset
            proxytunnel
            ptunnel
            pwnat
            msoffice-crypt-git
            stunnel
            dirbuster
            udptunnel
            dirbuster-wordlists
            fcrackzip
            crark
            pdfcrack
            ncrack
            ubertooth
        )
        local selected_haxor_options="$(print -l ${(o)haxor_options[*]} | fzf --preview 'paru -Si {} 2>/dev/null')" # Pick option with fzf and store it to local variable
        case ${selected_haxor_options} in # Read selected_haxor_options variable
            "rtl8188eus_monitor_mode_support")
                warn_msg "Moving into /tmp directory" # Show warning message
                cd /tmp # Move to /tmp directory
                warn_msg "Cloning repository..." # Show warning message
                git clone https://github.com/KanuX-14/rtl8188eus.git # Clone the repository, this fork support 5.17 linux kernel so i use this.
                warn_msg "Moving into /tmp/rtl8188eus directory" # Show warning message
                cd /tmp/rtl8188eus # Move to /tmp/rtl8188eus directory
                if [[ $REVERSE_MODE == true ]]; then
                    if [[ -f /etc/modprobe.d/realtek.conf ]]; then # Check if /etc/modprobe.d/realtek not found 
                        warn_msg "Remove blacklist r8188eu module from the kernel" # Show warning message
                        rm -f /etc/modprobe.d/realtek.conf
                    fi # End if-else statement
                    warn_msg "Uninstall..." # Show warning message
                    sudo make && sudo make uninstall # Uninstall
                else
                    sudo pacman -Sy --needed bc libelf dkms &>/dev/null # Install requirement package
                    sudo rmmod r818eu.ko &>/dev/null # Remove old module from the kernel
                    if [[ ! -f /etc/modprobe.d/realtek.conf ]]; then # Check if /etc/modprobe.d/realtek not found 
                        warn_msg "Blacklist r8188eu module from the kernel" # Show warning message
                        echo 'blacklist r8188eu' | sudo tee -a '/etc/modprobe.d/realtek.conf' # Blacklist old module
                    fi # End if-else statement
                    warn_msg "Compiling..." # Show warning message
                    sudo make && sudo make install # Compile && Install.
                fi
                warn_msg "Done. You need to reboot!" # Show warning message
                ;;
            *) [[ -n "$selected_haxor_options" ]] && set_it_up ${selected_haxor_options} ;; # If selected_options not empty && call function if the custom setup not available
        esac # End switch-case statement
        ;;
    "gaming"|"gaeming") # If option is gaming then:
        local -a gaming_options=( # Create local array with list of package related
            "intel_vulkan_API"
            "amd_vulkan_API"
        )
        local selected_gaming_options="$(print -l ${(o)gaming_options[*]} | fzf --preview 'paru -Si {} 2>/dev/null')" # Pick option with fzf and store it to local variable
        case ${selected_gaming_options} in # Read selected_haxor_options variable
            "amd_vulkan_API")
                set_it_up lib32-mesa vulkan-radeon lib32-vulkan-radeon vulkan-icd-loader lib32-vulkan-icd-loader # Set it up to support for Vulkan API (will be functional only if you have a Vulkan capable GPU) and 32-bit games
                ;;
            "intel_vulkan_API")
                set_it_up lib32-mesa vulkan-intel lib32-vulkan-intel vulkan-icd-loader lib32-vulkan-icd-loader # Set it up to support for Vulkan API (will be functional only if you have a Vulkan capable GPU) and 32-bit games
                ;;
            *) [[ -n "$selected_gaming_options" ]] && set_it_up ${selected_gaming_options} ;; # If selected_options not empty && call function if the custom setup not available
        esac # End switch-case statement
        ;;
    "music") # If option is music then:
        local -a music_options=( # Create local array with list of package related music.
            mpd
            calf
            surge
            ardour
            bitrot-git
            vcvrack
            invada-studio-plugins-lv2
            cadence
            pipewire
            dpf-plugins
            ebumeter
            dgedit
            eq10q
            geonkick
            helm-synth
            jack_capture
            liquidsfz
            mda.lv2
            ninjas2
            samplv1
            setbfree
            helvum
            easyeffects
            moony.lv2
            sonic-visualiser
            sonic-pi
            swh-plugins
            sherlock.lv2
            noise-repellent
            ir.lv2
            guitarix
            cardinal
            drumgizmo
            dragonfly-reverb
            carla
            caps
            tap-plugins
            wolf-shaper
            wolf-spectrum
            x42-plugins
            zam-plugins
            zita-ajbridge
            zita-njbridge
            zita-rev1
            zynaddsubfx
            lsp-plugins
        )
        local selected_music_options="$(print -l ${(o)music_options[*]} | fzf --preview 'paru -Si {} 2>/dev/null')" # Pick option with fzf and store it to local variable
        case ${selected_music_options} in # Read selected_music_options variable
            "pipewire") 
                set_it_up pipewire pipewire-pulse pipewire-alsa gst-plugin-pipewire wireplumber pipewire-v4l2 pipewire-zeroconf pipewire-jack
                ;;
            *) [[ -n "$selected_music_options" ]] && set_it_up ${selected_music_options} ;; # If selected_options not empty && call function if the custom setup not available
        esac # End switch-case statement
        ;;
    "other")
        local -a other_options=( # Create local array with list of package related
            "waydroid"
        )
        local selected_other_options="$(print -l ${(o)other_options[*]} | fzf --preview 'paru -Si {} 2>/dev/null')" # Pick option with fzf and store it to local variable
        case ${selected_other_options} in # Read selected_haxor_options variable
            "waydroid")
                set_it_up waydroid waydroid-image # Installing waydroid
                set_it_up linux-xanmod-anbox linux-xanmod-anbox-headers # Installing xanmod kernel with binder enabled (required)
                set_it_up python-pyclip # Install additional dependency for waydroid
                sudo zsh -ic 'update-grub' # Update GRUB
                if [[ ! $REVERSE_MODE == true ]]; then # If REVERSE_MODE is not true then:
                    waydroid prop set persist.waydroid.multi_windows false 2>/dev/null # Disables persistent freeform window mode
                    waydroid prop set persist.waydroid.height_padding 40 2>/dev/null # Adjust Height padding (30 will allow you to use navbar on mobile)
                    waydroid prop get persist.waydroid.width_padding 0 2>/dev/null # Adjust width padding
                    waydroid prop set waydroid.display_width 700 2>/dev/null # (auto-generated) Auto generated size of Waydroid screen
                    waydroid prop set persist.waydroid.width 700 2>/dev/null # Used for user to override desired resolution
                    warn_msg "Installation done, Now you need to reboot and start linux with kernel linux-xanmod-anbox at GRUB"
                    info_msg "TIPS: If you facing issues 'WARNING: Service manager /dev/binder has died'" # Show info message
                    info_msg "then you should add 'psi=1' in GRUB_CMDLINE_LINUX at /etc/default/grub," # Show info message
                    info_msg "and then run 'update-grub' on root user" # Show info message
                    warn_msg "Please read 'https://wiki.archlinux.org/title/Waydroid' for more information..."
                else
                    rm -f ~/.local/share/applications/waydroid*
                fi # End if-else statement
                ;;
            *) [[ -n "$selected_other_options" ]] && set_it_up ${selected_other_options} ;; # If selected_options not empty && call function if the custom setup not available
        esac # End switch-case statement
        ;;
    *) send_return EINVAL ;;
esac # End switch-case statement
