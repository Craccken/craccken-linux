# vim:ft=sh
#  ███████╗███████╗██╗  ██╗
#  ╚══███╔╝██╔════╝██║  ██║
#    ███╔╝ ███████╗███████║
#   ███╔╝  ╚════██║██╔══██║
#  ███████╗███████║██║  ██║
#  ╚══════╝╚══════╝╚═╝  ╚═╝
#          ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#          ┃                      Source file in /etc/zsh/zshrc.d                         ┃
#          ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
print -v ZSH_INIT_TIME -P '%D{%s%N}' # Get info time start
[[ -d "/etc/zsh/zshrc.d" ]] && { # Check if has /etc/zsh/zshrc.d directory && execute function below
    for file in /etc/zsh/zshrc.d/*(.); do # Create for-loop with file in /etc/zsh/zshrc.d/ directory
        eval "$(<${file})" # Check if file is readable && source the file
    done; unset file # End for-loop statement; Clearing variable so that will not polute the shell.
}
#          ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#          ┃                                     INIT                                     ┃
#          ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
run_after_load_(){ # Create function
    eval "$(</etc/zsh/configs/${1}_config)" # Source file that passed with first parameter and contain configuration
}
if [[ ! -d /etc/zsh/zinit ]]; then # Check if zsh-plugins-manager(zinit) not available
    return 1 # Exit
fi # End if-else statement.
declare -A ZINIT                                                            # Declare an associative array
ZINIT[HOME_DIR]=~/.local/share/zinit                                        # Set where zinit should create all working directories, default: ~/.local/share/zinit
ZINIT[COMPINIT_OPTS]="-C -d $XDG_CACHE_HOME/zsh/zcompdump-$ZSH_VERSION"     # Set options for compinit call(i.e done by `zicompinit`), use to pass -C to speed up loading
ZINIT[ZCOMPDUMP_PATH]="$XDG_CACHE_HOME/zsh/zcompdump-$ZSH_VERSION"          # Set directory for dumped completion file, this will speed compinit.
. /etc/zsh/zinit/zinit.zsh                                                  # Enable zsh-plugins-manager(zinit)
zicompinit                                                                  # Initialiaze completion for the current session when called directly.
zstyle :completion:* menu select                                            # Enable autocompletion with an arrow-key driven interactive.
zstyle :completion:* use-cache true                                         # Enable cache, it will optimize completion
zstyle :completion:* cache-path ~/.cache/zsh_completion_cache               # Defines the path where any cache files containing dumped completion data are stored
zstyle :completion:* verbose yes                                            # Verbose completion
zstyle :completion:* matcher-list 'm:{a-zA-Z}={A-Za-z}'                     # Case insensitive tab completion
zstyle :completion:*:descriptions format '⟨%d⟩'                             # Set group descriptor
_comp_options+=(globdots)                                                   # Include hidden files for compinit
zstyle :completion:*:*:*:*:processes command "ps -u $USER -o pid,user,comm -w -w" # Run command if completion processes
zmodload zsh/zpty
zmodload zsh/complist
zmodload zsh/datetime
#          ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#          ┃                                  Completion                                  ┃
#          ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
# NOTE: you need to run `zinit creinstall completion-name` to Install completions for plugin, can also receive absolute local path. -q – quiet. -Q - quiet all.
# TIPS: run `zinit clist` to list completions in use, with columns completions per line, `zinit clist 5` will for example print 5 completions per line. Default is 3.
# TIPS: run `zinit cuninstall completion-name` to uninstall completions for plugin.
# TIPS: run `zinit csearch` to search for available completions from any plugin. 
zinit ice --wait --silent --nocompile --from="github" --depth="1" \
    --id-as="efibootmgr__completion" --as="completion" # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
zinit light wehlando/efibootmgr-zsh-completion # Enable efibootmgr completion -- https://github.com/wehlando/efibootmgr-zsh-completion
#          ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#          ┃                                   Plugins                                    ┃
#          ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
# zinit ice --wait --silent --from="github" --depth="1" \
#     --id-as="zsh-vi-mode" --atload="run_after_load_ zvm" # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
# zinit light jeffreytse/zsh-vi-mode  # Enable zsh-vi-mode plugins -- https://github.com/jeffreytse/zsh-vi-mode

zinit ice --wait --silent --from="github" --depth="1" \
    --id-as="zsh-async"         # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
zinit light mafredri/zsh-async  # Enable zsh-async plugin -- https://github.com/mafredri/zsh-async

zinit ice --wait --silent --from="github" --depth="1" \
    --id-as="zsh-autopair"          # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
zinit light hlissner/zsh-autopair   # Enable zsh-autopair plugin -- https://github.com/hlissner/zsh-autopair

zinit ice --wait --silent           # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
zinit snippet OMZ::plugins/urltools # Enable ohmyzsh urltools plugin

# zinit ice --wait --silent --id-as="bash-insulter" \
#     --if="[[ -f /etc/bash.command-not-found ]]" # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
# zinit snippet /etc/bash.command-not-found       # Enable bash-insulter plugin -- https://github.com/hkbakke/bash-insulter

zinit ice --wait --silent --id-as="zsh-autosuggestions" \
    --if="[[ -d /usr/share/zsh/plugins/zsh-autosuggestions ]]" --atload="run_after_load_ zsh-autosuggestions" # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
zinit snippet /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh # Enable auto-suggestions plugin -- https://github.com/zsh-users/zsh-autosuggestions.

zinit ice --wait --silent --from="github" --depth="1" \
    --id-as="fast-syntax-highlighting" --atinit="zicdreplay"  --atload="run_after_load_ fast-syntax-highlighting" # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
zinit light zdharma-continuum/fast-syntax-highlighting  # Enable fast-syntax-highlighting plugin -- https://github.com/zdharma-continuum/fast-syntax-highlighting

if [[ $+commands[fzf] ]]; then # Check if fzf installed
    for fzf_plugin in completion key-bindings; do # Create for-loop with list of name
        zinit ice --wait="1" --silent --id-as="fzf/${fzf_plugin}" --atload="run_after_load_ fzf; "; zinit snippet /usr/share/fzf/${fzf_plugin}.zsh  # Specify ice modifiers && Enable fzf plugins -- https://github.com/junegunn/fzf
    done; unset fzf_plugin # End for-loop; Clearing variable so it will not polute the shell.
    zinit ice --wait="2" --silent --from="github" --depth="1" \
        --id-as="fzf-tab" --atload="run_after_load_ fzf-tab"    # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
    zinit light Aloxaf/fzf-tab                                  # Enable fzf-tab plugins -- https://github.com/Aloxaf/fzf-tab
fi # End if-else statement
#          ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#          ┃                                    Alias                                     ┃
#          ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
# NOTE: if you want to save changes on alias-configuration,zsh-keybinding you must update with `zinit-update`
zinit ice --wait --silent --id-as="config/keybinding" --nocompile                           # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
zinit snippet /etc/zsh/zsh-keybinding                                                       # Source file that contains keybinding, with zinit.
zinit ice --wait --silent --id-as="alias/user-alias" --nocompile                            # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
zinit snippet /etc/zsh/alias/user-alias                                                     # Source file that contains user-aliases, with zinit
zinit ice --wait --silent --id-as="alias/system-alias" --nocompile                          # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
zinit snippet /etc/zsh/alias/system-alias                                                   # Source file that contains system-aliases, with zinit
zinit ice --wait --silent --if="[[ $EUID -eq 0 ]]" --id-as="alias/root-alias" --nocompile   # Specify ice modifiers, read https://github.com/zdharma-continuum/zinit#ice-modifiers
zinit snippet /etc/zsh/alias/root-alias                                                     # Specify ice modifiers && source file that contains root-aliases, with zinit
for file in /etc/zsh/alias/*(.); do  # Create for-loop with list of commands
    local command="$(basename $file | cut -d '-' -f 1)" # Get only the first name of the file
    zinit ice --wait --silent --has="${command}" --id-as="alias/${command}-alias" --nocompile; zinit snippet /etc/zsh/alias/${command}-alias    # Specify ice modifiers && source file that contains $commands-alias, with zinit.
done; unset file # End for-loop; Clearing variable so it will not polute the shell.
#          ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#          ┃                                  Functions                                   ┃
#          ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
for function in /etc/zsh/functions/*(.) /etc/zsh/functions/lib/*(.) tetriscurses run-help run-help-ip; do # Create for-loop with list of functions from /etc/zsh/functions directory that will be loaded
    autoload ${function} 
done; unset function # End for-loop; Clearing variable so it will not polute the shell.
(( $+aliases[run-help] )) && unalias run-help # Check if specify alias available && remove alias
#          ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#          ┃                                    PROMPT                                    ┃
#          ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
update_prompt # Call update prompt function
#          ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#          ┃                                Hook functions                                ┃
#          ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
chpwd(){ # Define a hook function that executed whenever the current directory is changed.
    (commandcache exa --all --git --icons --group-directories-first --time-style=long-iso --group --color-scale) 2>/dev/null # Same like `la`
    [[ -r ./.rune_stone ]] && (<./.rune_stone 2>/dev/null) # Check if .rune_stone is readable file && read .rune_stone file
}
preexec(){ # Define a hook function that executed just after a command has been read and is about executed.
    start_time_execution=${EPOCHREALTIME} # Store current_time into variable start_time_execution
}
zshexit(){ # Define a hook function that executed at the point where the main shell is about exit normally.
    #echo "$(tput setaf 3)Good bye!$(tput sgr0)" # Print string
}
precmd(){ # Define a hook function that executed before each prompt.
    echo "" # Print string
    if [[ -z $NO_RPROMPT ]] || (( $NO_RPROMPT == 0 )); then # If no_prompt variable empty or 0 then:
        if [[ ! $TTY == /dev/tty* ]]; then # Check if TTY is not /dev/tty 
            if [[ $start_time_execution ]]; then # Check if variable start_time_execution is available
                readonly -F elapsed_time=$(( EPOCHREALTIME - start_time_execution )) # Current_time-start_time_execution -> store into variable elapsed_time
                readonly -F second=$(( elapsed_time%60 )) # Get second from elapsed_time,formula: elapsed_time/60 -> round it the output -> output*60 -> elapsed_time-output -> result
                readonly -i minute=$(( (elapsed_time/60)%60 )) # Get minute from elapsed time, formula: elapsed_time/60 -> output/60 -> round it the output_2 -> output_2*60 -> elapsed_time-output_2 -> result
                readonly -i hour=$(( elapsed_time/3600 )) # Get hour from elapsed time, formula: elapsed_time/3600 -> result
                if (( hour > 0 )); then # If hour greater than 0 then:
                    printf -v elapsed_time_execution '%ih%im' ${hour} ${minute} # Store output printf into variable elapsed_time_execution. output will be: 12h34m
                elif (( minute > 0 )); then # If minute greater than 0 then:
                    printf -v elapsed_time_execution '%im%is' ${minute} ${second} # Store output printf into variable elapsed_time_execution. output will be: 12m34s
                elif (( second >= 10 )); then # If second greater than/equal 10 then:
                    printf -v elapsed_time_execution '%.2fs' ${second} # Store output printf into variable elapsed_time_execution. variable second will be formated to floating point(output will be: 12.34s)
                elif (( second >= 1 )); then # If second greater than/equal 1 then:
                    printf -v elapsed_time_execution '%.3fs' ${second} # Store output printf into variable elapsed_time_execution. variable second will be formated to floating point(output will be: 1.233s)
                else
                    printf -v elapsed_time_execution '%ims' $(( second*1000 )) # Store output printf into variable elapsed_time_execution. Get the millisecond from elapsed_time, formula: second*1000
                fi
                unset start_time_execution # Clear the value of variable start_time_execution
            else
                unset elapsed_time_execution # Clear previous result when hitting ENTER with no command to execute
            fi # End if-else statement
            RPROMPT='%(1j.%F{#ff6e33}%K{#ff6e33}%F{#803719}⚙ %K{reset}%F{#ff6e33} %j .)%(?..%F{#af0000}%K{#af0000}%F{#490000} %K{reset}%F{#af0000} %? )%F{#2c99ef}%K{#2c99ef}%F{#13456c} %K{reset}%F{#2c99ef} ${elapsed_time_execution}' # Set right-prompt style
        fi # End if-else statement
    fi # End if-else statement
}
#          ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#          ┃                                Trap functions                                ┃
#          ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
TRAPINT(){ # Define a trap function that executed when CTRL_C was pressed.
    echo "" # Print string
    return 128+$1
}
TRAPQUIT(){ # Define a trap function that executed when program running and CTRL_\ was pressed.
    return 128+$1
}
TRAPCONT(){
}
TRAPWINCH(){ # Define a trap function that executed when terminal resized
    update_prompt # Call update prompt function
}
#          ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#          ┃                                     END                                      ┃
#          ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
print -v ZSH_LOADED_TIME -P '%D{%s%N}' # Get info time end
ZSH_STARTUP_TIME=$(( ( ZSH_LOADED_TIME - ZSH_INIT_TIME ) / 1000000 )) # Calculate differ time between start and end
# NOTE: Uncomment this below if you want benchmarking this config
# info_msg "Startup time: $ZSH_STARTUP_TIME ms"
unset ZSH_INIT_TIME ZSH_LOADED_TIME ZSH_STARTUP_TIME # Remove variable, so it won't polute environment
